trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - azure-pipelines.yml
      - README.md
      - docs/**

pool:
  name: MyFreePool  # Kept as per original; ensure this pool is configured


# Define reusable variables
variables:
  node_version: '18.x'
  SCM_DO_BUILD_DURING_DEPLOYMENT: true  # Let Azure handle build during deployment

stages:
# 1. Install dependencies and cache them for reuse
- stage: Install
  displayName: "Install Dependencies"
  jobs:
  - job: InstallNode
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(node_version)'
      displayName: 'Set up Node.js'
    - script: npm ci --no-audit --no-fund
      displayName: 'Install project dependencies'
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
        path: '$(Build.SourcesDirectory)/node_modules'
        restoreKeys: 'npm | "$(Agent.OS)"'
      continueOnError: true
    - script: npx playwright install --with-deps
      displayName: 'Install Playwright browsers'
    - task: Cache@2
      displayName: 'Cache Playwright browsers'
      inputs:
        key: 'playwright | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
        path: '$(HOME)/.cache/ms-playwright'
        restoreKeys: 'playwright | "$(Agent.OS)"'
      continueOnError: true

# 2. Run unit and E2E tests, publish test report
- stage: Test
  displayName: "Run Unit and E2E Tests"
  dependsOn: Install
  jobs:
  - job: RunTests
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(node_version)'
      displayName: 'Set up Node.js'
    - task: Cache@2
      displayName: 'Restore node_modules cache'
      inputs:
        key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
        path: '$(Build.SourcesDirectory)/node_modules'
        restoreKeys: 'npm | "$(Agent.OS)"'
      continueOnError: true
    - script: npm test
      displayName: 'Run unit tests'
      continueOnError: true
    - script: |
        mkdir -p playwright-report
        npx playwright test --reporter=html || echo "Tests failed, but report generated."
      displayName: 'Run Playwright E2E tests'
      continueOnError: true
    - task: PublishBuildArtifacts@1
      condition: always()
      displayName: 'Publish Playwright test report'
      inputs:
        pathToPublish: 'playwright-report'
        artifactName: 'playwright-report'
        publishLocation: 'Container'

# 3. Build the application for production
- stage: Build
  displayName: "Build Application"
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: BuildApp
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(node_version)'
      displayName: 'Set up Node.js'
    - task: Cache@2
      displayName: 'Restore node_modules cache'
      inputs:
        key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
        path: '$(Build.SourcesDirectory)/node_modules'
        restoreKeys: 'npm | "$(Agent.OS)"'
      continueOnError: true
    - script: npm run build
      displayName: 'Build app for production'
      env:
        NODE_ENV: production
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build output'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/dist'  # Adjust if build output is not 'dist'
        artifactName: 'build-output'
        publishLocation: 'Container'

# 4. Package the build output into a zip file
- stage: Package
  displayName: "Package App"
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: ArchiveAndPublish
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download build output'
      inputs:
        artifactName: 'build-output'
        downloadPath: '$(Build.ArtifactStagingDirectory)/dist'
    - task: ArchiveFiles@2
      displayName: 'Create app zip'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/shopingkaro.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish app zip'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/shopingkaro.zip'
        artifactName: 'shopingkaro-app'
        publishLocation: 'Container'

# 5. Approval gate before deployment
- stage: Release
  displayName: "Release Approval"
  dependsOn: Package
  condition: succeeded()
  jobs:
  - deployment: NotifyRelease
    displayName: "Await Release Approval"
    environment: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo "Ready for production deployment."
            displayName: 'Confirm release readiness'

# 6. Deploy to Azure Web App
- stage: Deploy
  displayName: "Deploy to Azure"
  dependsOn: Release
  condition: succeeded()
  jobs:
  - deployment: DeployToAzureAppService
    displayName: "Deploy Web App"
    environment: deployappr
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download app zip'
            inputs:
              artifactName: 'shopingkaro-app'
              downloadPath: '$(Pipeline.Workspace)'
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: 'azure-rm-shopingkaro'
              appType: 'webApp'
              appName: 'shopingkaro-app-service'
              package: '$(Pipeline.Workspace)/shopingkaro-app/shopingkaro.zip'
