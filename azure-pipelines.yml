trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - azure-pipelines.yml
      - README.md
      - docs/**

pool:
  name: MyFreePool

variables:
  - name: node_version
    value: '18.x'
  - name: SCM_DO_BUILD_DURING_DEPLOYMENT
    value: true  # Ensure Azure handles build during deployment

stages:

# 1. Install Stage
- stage: Install
  displayName: "Install Dependencies"
  jobs:
  - job: InstallNode
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(node_version)'
      displayName: 'Install Node.js'

    - script: npm ci --no-audit --no-fund
      displayName: 'Install NPM dependencies'

    - script: npm install --only=dev
      displayName: 'Install Dev Dependencies'

    - script: npx playwright install --with-deps
      displayName: 'Install Playwright Browsers'

# 2. Test Stage
- stage: Test
  displayName: "Run Unit and E2E Tests"
  dependsOn: Install
  jobs:
  - job: RunTests
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(node_version)'
      displayName: 'Install Node.js'

    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(Build.SourcesDirectory)/node_modules'
      continueOnError: true

    - script: npm ci --no-audit --no-fund
      displayName: 'Install NPM dependencies'

    - script: |
        npm install @playwright/test @playwright/allure-playwright --save-dev
        npx playwright install --with-deps
      displayName: 'Install Playwright, Allure, & Browsers'

    - script: npm test
      displayName: 'Run Unit Tests'
      continueOnError: true

    - script: |
        mkdir -p playwright-report
        npx playwright test --reporter=html || echo "Tests failed but report will still be generated."
      displayName: 'Run Playwright Tests with HTML Report'
      continueOnError: true

    - script: |
        mkdir -p allure-report
        npx playwright test --reporter=allure-playwright || echo "Tests failed but Allure report will still be generated."
        npx allure generate allure-results -o allure-report --clean
      displayName: 'Run Playwright Tests with Allure Report'
      continueOnError: true

    - task: PublishBuildArtifacts@1
      condition: always()
      displayName: 'Publish Playwright HTML Report'
      inputs:
        pathToPublish: 'playwright-report'
        artifactName: 'playwright-report'
        publishLocation: 'Container'

    - task: PublishBuildArtifacts@1
      condition: always()
      displayName: 'Publish Allure Report'
      inputs:
        pathToPublish: 'allure-report'
        artifactName: 'allure-report'
        publishLocation: 'Container'

# 3. Package Stage
- stage: Package
  displayName: "Package App"
  dependsOn: Test
  jobs:
  - job: ArchiveAndPublish
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(node_version)'
      displayName: 'Install Node.js'

    - script: npm ci --no-audit --no-fund
      displayName: 'Install NPM dependencies before packaging'
      env:
        NODE_ENV: production  # Ensure production dependencies are installed

    - script: |
        IF NOT EXIST node_modules (
          echo Error: node_modules directory not found after npm ci. Check package.json and package-lock.json.
          exit 1
        )
      displayName: 'Verify node_modules directory'

    - task: ArchiveFiles@2
      displayName: 'Archive app including .env and node_modules'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/shopingkaro.zip'
        replaceExistingArchive: true
        archiveFilePatterns: |
          **/*
          .env
          node_modules/**  # Explicitly include node_modules

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/shopingkaro.zip'
        artifactName: 'shopingkaro-app'
        publishLocation: 'Container'

# 4. Release Approval Stage
- stage: Release
  displayName: "Release Approval Stage"
  dependsOn: Package
  condition: succeeded()
  jobs:
  - deployment: NotifyRelease
    displayName: "Release Confirmation"
    environment:
      name: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo "Application ready for production deployment."
            displayName: "Release Confirmation"

# 5. Deploy Stage
- stage: Deploy
  displayName: "Deploy to Azure"
  dependsOn: Release
  jobs:
  - deployment: DeployToAzureAppService
    displayName: "Deploy Web App"
    environment:
      name: deployappr
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download build artifact"
            inputs:
              artifactName: "shopingkaro-app"
              downloadPath: "$(Pipeline.Workspace)"

          - task: AzureWebApp@1
            displayName: "Deploy to Azure Web App"
            inputs:
              azureSubscription: "azure-rm-shopingkaro"
              appType: "webApp"
              appName: "shopingkaro-app-service"
              package: "$(Pipeline.Workspace)/shopingkaro-app/shopingkaro.zip"