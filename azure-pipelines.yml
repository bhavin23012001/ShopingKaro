trigger:
  branches:
    include:
      - dev
      - qa
      - master

pool:
  name: MyFreePool

variables:
  - name: node_version
    value: '18.x'
  - name: SCM_DO_BUILD_DURING_DEPLOYMENT
    value: true
  - name: environmentName
    value: $[lower(variables['Build.SourceBranchName'])]

stages:

# 1. Install Stage
- stage: Install
  displayName: "Install Dependencies"
  jobs:
    - job: InstallNode
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '$(node_version)'
          displayName: 'Install Node.js'

        - script: npm ci --no-audit --no-fund
          displayName: 'Install NPM dependencies'

        - script: npm install --only=dev
          displayName: 'Install Dev Dependencies'

        - script: npx playwright install --with-deps
          displayName: 'Install Playwright Browsers'

# 2. Test Stage
- stage: Test
  displayName: "Run Unit and E2E Tests"
  dependsOn: Install
  jobs:
    - job: RunTests
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '$(node_version)'
          displayName: 'Install Node.js'

        - task: Cache@2
          displayName: 'Cache node_modules'
          inputs:
            key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
            restoreKeys: |
              npm | "$(Agent.OS)"
            path: '$(Build.SourcesDirectory)/node_modules'
          continueOnError: true

        - script: npm ci --no-audit --no-fund
          displayName: 'Install NPM dependencies'

        - script: |
            npm install @playwright/test allure-playwright allure-commandline --save-dev
            npx playwright install --with-deps
          displayName: 'Install Playwright, Allure, and Browsers'

        - script: npm test
          displayName: 'Run Unit Tests'
          continueOnError: true

        - script: |
            mkdir -p playwright-report
            mkdir -p allure-results
            npx playwright test --reporter=html,allure-playwright || echo "Tests failed but reports will still be generated."
          displayName: 'Run Playwright Tests with HTML and Allure Reporters'
          continueOnError: true

        - script: |
            npx allure generate allure-results --clean -o allure-report
          displayName: 'Generate Allure Report'
          continueOnError: true

        - task: PublishAllureReport@1
          condition: always()
          displayName: 'Publish Allure Report to Azure DevOps UI'
          inputs:
            testResultsDir: 'allure-results'
            reportDir: 'allure-report'
            allureVersion: '2.27.0'

        - task: PublishBuildArtifacts@1
          condition: always()
          displayName: 'Publish Playwright HTML Report'
          inputs:
            pathToPublish: 'playwright-report'
            artifactName: 'playwright-report'
            publishLocation: 'Container'

        - task: PublishBuildArtifacts@1
          condition: always()
          displayName: 'Publish Allure Report Artifact'
          inputs:
            pathToPublish: 'allure-report'
            artifactName: 'allure-report'
            publishLocation: 'Container'

# 3. Package Stage
- stage: Package
  displayName: "Package App"
  dependsOn: Test
  jobs:
    - job: ArchiveAndPublish
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '$(node_version)'
          displayName: 'Install Node.js'

        - script: npm ci --no-audit --no-fund
          displayName: 'Install NPM dependencies before packaging'
          env:
            NODE_ENV: production

        - script: |
            IF NOT EXIST node_modules (
              echo Error: node_modules directory not found after npm ci. Check package.json and package-lock.json.
              exit 1
            )
          displayName: 'Verify node_modules directory'

        - task: ArchiveFiles@2
          displayName: 'Archive app including .env and node_modules'
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/shopingkaro.zip'
            replaceExistingArchive: true
            archiveFilePatterns: |
              **/*
              .env
              node_modules/**

        - task: PublishBuildArtifacts@1
          displayName: 'Publish artifact'
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)/shopingkaro.zip'
            artifactName: 'shopingkaro-app'
            publishLocation: 'Container'

# 4. Deploy Stage (to dev, qa, or prod based on branch)
- stage: Deploy
  displayName: "Deploy Based on Branch"
  dependsOn: Package
  condition: succeeded()
  jobs:
    - deployment: DeployToAzureAppService
      displayName: "Deploy Web App"
      environment:
        name: node-$(environmentName)  # dev / qa / master â†’ node-dev / node-qa / node-prod
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadBuildArtifacts@0
                displayName: "Download build artifact"
                inputs:
                  artifactName: "shopingkaro-app"
                  downloadPath: "$(Pipeline.Workspace)"

              - script: echo "Deploying for branch $(Build.SourceBranchName)"
                displayName: "Show Branch"

              - task: AzureWebApp@1
                displayName: "Deploy to Azure Web App"
                inputs:
                  azureSubscription: "azure-rm-shopingkaro"
                  appType: "webApp"
                  appName: "shopingkaro-app-service"
                  package: "$(Pipeline.Workspace)/shopingkaro-app/shopingkaro.zip"
